(()=>{var e={18:e=>{"use strict";e.exports=require("tty")},23:e=>{"use strict";e.exports=require("util")},33:(e,t,n)=>{var s=n(18),r=n(23);(t=e.exports=n(910)).init=function(e){e.inspectOpts={};for(var n=Object.keys(t.inspectOpts),s=0;s<n.length;s++)e.inspectOpts[n[s]]=t.inspectOpts[n[s]]},t.log=function(){return i.write(r.format.apply(r,arguments)+"\n")},t.formatArgs=function(e){var n=this.namespace;if(this.useColors){var s=this.color,r="  [3"+s+";1m"+n+" [0m";e[0]=r+e[0].split("\n").join("\n"+r),e.push("[3"+s+"m+"+t.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+n+" "+e[0]},t.save=function(e){null==e?delete process.env.DEBUG:process.env.DEBUG=e},t.load=o,t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):s.isatty(a)},t.colors=[6,2,3,4,5,1],t.inspectOpts=Object.keys(process.env).filter(function(e){return/^debug_/i.test(e)}).reduce(function(e,t){var n=t.substring(6).toLowerCase().replace(/_([a-z])/g,function(e,t){return t.toUpperCase()}),s=process.env[t];return s=!!/^(yes|on|true|enabled)$/i.test(s)||!/^(no|off|false|disabled)$/i.test(s)&&("null"===s?null:Number(s)),e[n]=s,e},{});var a=parseInt(process.env.DEBUG_FD,10)||2;1!==a&&2!==a&&r.deprecate(function(){},"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var i=1===a?process.stdout:2===a?process.stderr:function(e){var t;switch(process.binding("tty_wrap").guessHandleType(e)){case"TTY":(t=new s.WriteStream(e))._type="tty",t._handle&&t._handle.unref&&t._handle.unref();break;case"FILE":(t=new(n(896).SyncWriteStream)(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":(t=new(n(278).Socket)({fd:e,readable:!1,writable:!0})).readable=!1,t.read=null,t._type="pipe",t._handle&&t._handle.unref&&t._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return t.fd=e,t._isStdio=!0,t}(a);function o(){return process.env.DEBUG}t.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts).split("\n").map(function(e){return e.trim()}).join(" ")},t.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,r.inspect(e,this.inspectOpts)},t.enable(o())},157:e=>{"use strict";e.exports=require("electron")},278:e=>{"use strict";e.exports=require("net")},313:(e,t,n)=>{var s=n(928),r=n(317).spawn,a=n(753)("electron-squirrel-startup"),i=n(157).app,o=function(e,t){var n=s.resolve(s.dirname(process.execPath),"..","Update.exe");a("Spawning `%s` with args `%s`",n,e),r(n,e,{detached:!0}).on("close",t)};e.exports=function(){if("win32"===process.platform){var e=process.argv[1];a("processing squirrel command `%s`",e);var t=s.basename(process.execPath);if("--squirrel-install"===e||"--squirrel-updated"===e)return o(["--createShortcut="+t],i.quit),!0;if("--squirrel-uninstall"===e)return o(["--removeShortcut="+t],i.quit),!0;if("--squirrel-obsolete"===e)return i.quit(),!0}return!1}()},317:e=>{"use strict";e.exports=require("child_process")},585:e=>{var t=1e3,n=60*t,s=60*n,r=24*s;function a(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,i){i=i||{};var o,c=typeof e;if("string"===c&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(a){var i=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"days":case"day":case"d":return i*r;case"hours":case"hour":case"hrs":case"hr":case"h":return i*s;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}(e);if("number"===c&&!1===isNaN(e))return i.long?a(o=e,r,"day")||a(o,s,"hour")||a(o,n,"minute")||a(o,t,"second")||o+" ms":function(e){return e>=r?Math.round(e/r)+"d":e>=s?Math.round(e/s)+"h":e>=n?Math.round(e/n)+"m":e>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},753:(e,t,n)=>{"undefined"!=typeof process&&"renderer"===process.type?e.exports=n(833):e.exports=n(33)},833:(e,t,n)=>{function s(){var e;try{e=t.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(t=e.exports=n(910)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),n){var s="color: "+this.color;e.splice(1,0,s,"color: inherit");var r=0,a=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(a=r))}),e.splice(a,0,s)}},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=s,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(s())},896:e=>{"use strict";e.exports=require("fs")},910:(e,t,n)=>{var s;function r(e){function n(){if(n.enabled){var e=n,r=+new Date,a=r-(s||r);e.diff=a,e.prev=s,e.curr=r,s=r;for(var i=new Array(arguments.length),o=0;o<i.length;o++)i[o]=arguments[o];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var c=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,s){if("%%"===n)return n;c++;var r=t.formatters[s];if("function"==typeof r){var a=i[c];n=r.call(e,a),i.splice(c,1),c--}return n}),t.formatArgs.call(e,i),(n.log||t.log||console.log.bind(console)).apply(e,i)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=function(e){var n,s=0;for(n in e)s=(s<<5)-s+e.charCodeAt(n),s|=0;return t.colors[Math.abs(s)%t.colors.length]}(e),"function"==typeof t.init&&t.init(n),n}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var n=("string"==typeof e?e:"").split(/[\s,]+/),s=n.length,r=0;r<s;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var n,s;for(n=0,s=t.skips.length;n<s;n++)if(t.skips[n].test(e))return!1;for(n=0,s=t.names.length;n<s;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(585),t.names=[],t.skips=[],t.formatters={}},928:e=>{"use strict";e.exports=require("path")}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,n),a.exports}(()=>{"use strict";var e=n(157),t=n(928);const s=require("sqlite3"),r=require("fs/promises");let a,i;n(313)&&e.app.quit();const o=()=>{a=new e.BrowserWindow({height:800,width:1200,minHeight:600,minWidth:800,titleBarStyle:"hiddenInset",webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:t.join(__dirname,"preload.js")}}),a.loadFile(t.join(__dirname,"../renderer/index.html"))};e.app.whenReady().then(()=>{o(),(()=>{const n=t.join(e.app.getPath("userData"),"dear-bones.db");i=new s.Database(n),i.serialize(()=>{i.run("\n      CREATE TABLE IF NOT EXISTS decks (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        description TEXT,\n        emoji TEXT,\n        tags TEXT,\n        created_at INTEGER NOT NULL,\n        updated_at INTEGER NOT NULL,\n        card_count INTEGER DEFAULT 0\n      )\n    "),i.run("\n      CREATE TABLE IF NOT EXISTS cards (\n        id TEXT PRIMARY KEY,\n        deck_id TEXT NOT NULL,\n        front TEXT NOT NULL,\n        back TEXT NOT NULL,\n        tags TEXT,\n        created_at INTEGER NOT NULL,\n        updated_at INTEGER NOT NULL,\n        last_studied INTEGER,\n        study_count INTEGER DEFAULT 0,\n        difficulty REAL DEFAULT 0,\n        interval INTEGER DEFAULT 1,\n        ease_factor REAL DEFAULT 2.5,\n        FOREIGN KEY (deck_id) REFERENCES decks (id) ON DELETE CASCADE\n      )\n    "),i.run("\n      CREATE TABLE IF NOT EXISTS study_sessions (\n        id TEXT PRIMARY KEY,\n        deck_id TEXT NOT NULL,\n        card_id TEXT NOT NULL,\n        confidence INTEGER NOT NULL,\n        response_time INTEGER NOT NULL,\n        studied_at INTEGER NOT NULL,\n        FOREIGN KEY (deck_id) REFERENCES decks (id) ON DELETE CASCADE,\n        FOREIGN KEY (card_id) REFERENCES cards (id) ON DELETE CASCADE\n      )\n    "),i.run("\n      CREATE TABLE IF NOT EXISTS settings (\n        key TEXT PRIMARY KEY,\n        value TEXT NOT NULL\n      )\n    ",e=>{e?console.error("Error creating settings table:",e):l()})})})(),e.app.on("activate",()=>{0===e.BrowserWindow.getAllWindows().length&&o()})}),e.app.on("window-all-closed",()=>{"darwin"!==process.platform&&e.app.quit()}),e.ipcMain.handle("db-get-decks",()=>new Promise((e,t)=>{i.all("SELECT * FROM decks ORDER BY updated_at DESC",(n,s)=>{if(n)t(n);else{const t=s.map(e=>({...e,tags:JSON.parse(e.tags||"[]"),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),cardCount:e.card_count}));e(t)}})})),e.ipcMain.handle("db-create-deck",(e,t)=>new Promise((e,n)=>{const s=i.prepare("\n      INSERT INTO decks (id, name, description, emoji, tags, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    ");s.run([t.id,t.name,t.description,t.emoji,JSON.stringify(t.tags),Date.now(),Date.now()],function(s){s?n(s):e({id:t.id})}),s.finalize()})),e.ipcMain.handle("db-update-deck",(e,t,n)=>new Promise((e,s)=>{const r=[],a=[];void 0!==n.name&&(r.push("name = ?"),a.push(n.name)),void 0!==n.description&&(r.push("description = ?"),a.push(n.description)),void 0!==n.emoji&&(r.push("emoji = ?"),a.push(n.emoji)),void 0!==n.tags&&(r.push("tags = ?"),a.push(JSON.stringify(n.tags))),r.push("updated_at = ?"),a.push(Date.now()),a.push(t);const o=i.prepare(`\n      UPDATE decks SET ${r.join(", ")} WHERE id = ?\n    `);o.run(a,function(t){t?s(t):e({changes:this.changes})}),o.finalize()})),e.ipcMain.handle("db-delete-deck",(e,t)=>new Promise((e,n)=>{i.run("DELETE FROM cards WHERE deck_id = ?",[t],s=>{s?n(s):i.run("DELETE FROM decks WHERE id = ?",[t],function(t){t?n(t):e({changes:this.changes})})})})),e.ipcMain.handle("db-get-cards",(e,t)=>new Promise((e,n)=>{i.all("SELECT * FROM cards WHERE deck_id = ? ORDER BY updated_at DESC",[t],(t,s)=>{if(t)n(t);else{const t=s.map(e=>({...e,deckId:e.deck_id,tags:JSON.parse(e.tags||"[]"),createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at),lastStudied:e.last_studied?new Date(e.last_studied):void 0,studyCount:e.study_count,easeFactor:e.ease_factor}));e(t)}})})),e.ipcMain.handle("db-create-card",(e,t)=>new Promise((e,n)=>{const s=i.prepare("\n      INSERT INTO cards (id, deck_id, front, back, tags, created_at, updated_at, study_count, difficulty, interval, ease_factor)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    ");s.run([t.id,t.deckId,t.front,t.back,JSON.stringify(t.tags),Date.now(),Date.now(),t.studyCount||0,t.difficulty||0,t.interval||1,t.easeFactor||2.5],function(s){s?n(s):i.run("UPDATE decks SET card_count = card_count + 1, updated_at = ? WHERE id = ?",[Date.now(),t.deckId],s=>{s?n(s):e({id:t.id})})}),s.finalize()})),e.ipcMain.handle("db-update-card",(e,t,n)=>new Promise((e,s)=>{const r=[],a=[];void 0!==n.front&&(r.push("front = ?"),a.push(n.front)),void 0!==n.back&&(r.push("back = ?"),a.push(n.back)),void 0!==n.tags&&(r.push("tags = ?"),a.push(JSON.stringify(n.tags))),void 0!==n.lastStudied&&(r.push("last_studied = ?"),a.push(n.lastStudied instanceof Date?n.lastStudied.getTime():n.lastStudied)),void 0!==n.studyCount&&(r.push("study_count = ?"),a.push(n.studyCount)),void 0!==n.difficulty&&(r.push("difficulty = ?"),a.push(n.difficulty)),void 0!==n.interval&&(r.push("interval = ?"),a.push(n.interval)),void 0!==n.easeFactor&&(r.push("ease_factor = ?"),a.push(n.easeFactor)),r.push("updated_at = ?"),a.push(Date.now()),a.push(t);const o=i.prepare(`\n      UPDATE cards SET ${r.join(", ")} WHERE id = ?\n    `);o.run(a,function(t){t?s(t):e({changes:this.changes})}),o.finalize()})),e.ipcMain.handle("db-delete-card",(e,t)=>new Promise((e,n)=>{i.get("SELECT deck_id FROM cards WHERE id = ?",[t],(s,r)=>{if(s)return void n(s);if(!r)return void e({changes:0});const a=r.deck_id;i.run("DELETE FROM cards WHERE id = ?",[t],function(t){t?n(t):i.run("UPDATE decks SET card_count = card_count - 1, updated_at = ? WHERE id = ?",[Date.now(),a],t=>{t?n(t):e({changes:this.changes})})})})})),e.ipcMain.handle("db-get-study-sessions",(e,t)=>new Promise((e,n)=>{const s=t?"SELECT * FROM study_sessions WHERE deck_id = ? ORDER BY studied_at DESC":"SELECT * FROM study_sessions ORDER BY studied_at DESC",r=t?[t]:[];i.all(s,r,(t,s)=>{if(t)n(t);else{const t=s.map(e=>({...e,deckId:e.deck_id,cardId:e.card_id,responseTime:e.response_time,studiedAt:new Date(e.studied_at)}));e(t)}})})),e.ipcMain.handle("db-create-study-session",(e,t)=>new Promise((e,n)=>{const s=i.prepare("\n      INSERT INTO study_sessions (id, deck_id, card_id, confidence, response_time, studied_at)\n      VALUES (?, ?, ?, ?, ?, ?)\n    ");s.run([t.id,t.deckId,t.cardId,t.confidence,t.responseTime,Date.now()],function(s){s?n(s):e({id:t.id})}),s.finalize()})),e.ipcMain.handle("db-get-settings",()=>new Promise((e,t)=>{i.all("SELECT * FROM settings",(n,s)=>{if(n)t(n);else{const t={};s.forEach(e=>{try{t[e.key]=JSON.parse(e.value)}catch{t[e.key]=e.value}}),e(t)}})})),e.ipcMain.handle("db-update-setting",(e,t,n)=>new Promise((e,s)=>{const r=i.prepare("\n      INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)\n    ");r.run([t,JSON.stringify(n)],function(r){r?s(r):e({key:t,value:n})}),r.finalize()}));const c=async(e,t,n)=>new Promise((s,r)=>{i.get("SELECT id FROM decks WHERE name = ?",[e],(a,o)=>{if(a)return void r(a);if(o)return void s(o.id);const c=Date.now().toString()+"_"+Math.random().toString(36).substr(2,9),d=i.prepare("\n        INSERT INTO decks (id, name, description, emoji, tags, created_at, updated_at, card_count)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      ");d.run([c,e,"Imported from CSV",t,JSON.stringify([]),Date.now(),Date.now(),0],function(t){t?r(t):(n.decksCreated.push(e),s(c))}),d.finalize()})}),d=async(e,t,n,s,r,a,o)=>new Promise((c,d)=>{const u=Date.now().toString()+"_"+Math.random().toString(36).substr(2,9),l=i.prepare("\n      INSERT INTO cards (id, deck_id, front, back, tags, created_at, updated_at, study_count, difficulty, interval, ease_factor)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    ");l.run([u,e,t,n,JSON.stringify(s),Date.now(),Date.now(),o,r,a,2.5],function(t){t?d(t):i.run("UPDATE decks SET card_count = card_count + 1, updated_at = ? WHERE id = ?",[Date.now(),e],e=>{e?d(e):c()})}),l.finalize()});e.ipcMain.handle("export-csv",async(t,n)=>{try{const t=n?await u(n):"all-decks",s=await e.dialog.showSaveDialog(a,{defaultPath:`${t}.csv`,filters:[{name:"CSV Files",extensions:["csv"]},{name:"All Files",extensions:["*"]}]});if(!s.canceled&&s.filePath)try{const e=await(async e=>new Promise((t,n)=>{const s=e?"SELECT c.*, d.name as deck_name, d.emoji as deck_emoji \n         FROM cards c JOIN decks d ON c.deck_id = d.id \n         WHERE c.deck_id = ? \n         ORDER BY c.created_at":"SELECT c.*, d.name as deck_name, d.emoji as deck_emoji \n         FROM cards c JOIN decks d ON c.deck_id = d.id \n         ORDER BY d.name, c.created_at",r=e?[e]:[];i.all(s,r,(s,r)=>{if(s)return void n(s);const a=[];e?a.push("Front,Back,Tags,Difficulty,Interval,Study Count"):a.push("Deck Name,Deck Emoji,Front,Back,Tags,Difficulty,Interval,Study Count"),r.forEach(t=>{const n=JSON.parse(t.tags||"[]").join(";"),s=(e?[t.front,t.back,n,t.difficulty.toString(),t.interval.toString(),t.study_count.toString()]:[t.deck_name,t.deck_emoji||"",t.front,t.back,n,t.difficulty.toString(),t.interval.toString(),t.study_count.toString()]).map(e=>{const t=String(e);return t.includes(",")||t.includes('"')||t.includes("\n")?`"${t.replace(/"/g,'""')}"`:t});a.push(s.join(","))}),t(a.join("\n"))})}))(n);return await r.writeFile(s.filePath,e,"utf-8"),{success:!0,filePath:s.filePath}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Failed to export CSV"}}return{success:!1,error:"Export cancelled"}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Export failed"}}}),e.ipcMain.handle("import-csv",async(t,n)=>{try{const t=await e.dialog.showOpenDialog(a,{filters:[{name:"CSV Files",extensions:["csv"]},{name:"All Files",extensions:["*"]}],properties:["openFile"]});if(!t.canceled&&t.filePaths.length>0){const e=await(async(e,t)=>{try{const n=await r.readFile(e,"utf-8"),s=e=>{const t=[];let n=[],s="",r=!1,a=0;for(;a<e.length;){const i=e[a],o=e[a+1];'"'===i?r&&'"'===o?(s+='"',a+=2):(r=!r,a++):","!==i||r?"\n"!==i||r?("\r"===i||(s+=i),a++):(n.push(s.trim()),n.some(e=>e.length>0)&&t.push(n),n=[],s="",a++):(n.push(s.trim()),s="",a++)}return(s.trim()||n.length>0)&&(n.push(s.trim()),n.some(e=>e.length>0)&&t.push(n)),t},a=s(n);if(a.length<2)throw new Error("CSV file must have at least a header and one data row");const i=a[0].map(e=>e.toLowerCase().trim()),o={success:!0,imported:0,errors:[],decksCreated:[]},u=i.findIndex(e=>e.includes("front")),l=i.findIndex(e=>e.includes("back"));if(-1===u||-1===l)throw new Error("CSV must contain Front and Back columns");const p=i.findIndex(e=>e.includes("tag")),f=i.findIndex(e=>e.includes("deck")&&e.includes("name")),E=i.findIndex(e=>e.includes("deck")&&e.includes("emoji")),h=i.findIndex(e=>e.includes("difficulty")),g=i.findIndex(e=>e.includes("interval")),m=i.findIndex(e=>e.includes("study")&&e.includes("count"));for(let e=1;e<a.length;e++)try{const n=a[e];if(n.length<Math.max(u,l)+1){o.errors.push(`Row ${e+1}: Insufficient columns`);continue}const s=n[u]?.trim(),r=n[l]?.trim();if(!s||!r){o.errors.push(`Row ${e+1}: Front and Back are required`);continue}let i=t;if(!i&&f>=0){const t=n[f]?.trim();if(!t){o.errors.push(`Row ${e+1}: No deck specified`);continue}i=await c(t,n[E]?.trim()||"📚",o)}else if(!i){o.errors.push(`Row ${e+1}: No target deck specified`);continue}const T=p>=0&&n[p]?.split(";").filter(e=>e.trim())||[],y=h>=0&&parseFloat(n[h])||0,w=g>=0&&parseInt(n[g])||1,_=m>=0&&parseInt(n[m])||0;await d(i,s,r,T,y,w,_),o.imported++}catch(t){o.errors.push(`Row ${e+1}: ${t instanceof Error?t.message:"Unknown error"}`)}return o}catch(e){return{success:!1,error:e instanceof Error?e.message:"Failed to import CSV"}}})(t.filePaths[0],n);return e}return{success:!1,error:"Import cancelled"}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Import failed"}}});const u=async e=>new Promise((t,n)=>{i.get("SELECT name FROM decks WHERE id = ?",[e],(e,s)=>{if(e)n(e);else if(s){const e=s.name.replace(/[^a-zA-Z0-9]/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"");t(e||"deck")}else t("deck")})}),l=()=>{i.get("SELECT COUNT(*) as count FROM decks",(e,t)=>{if(e)console.error("Error checking deck count:",e);else if(0===t.count){console.log("Seeding database with sample data...");const e=[{id:"1",name:"Spanish Vocabulary",description:"Essential Spanish words and phrases",emoji:"🇪🇸",tags:["language","spanish"]},{id:"2",name:"Biology Terms",description:"Key concepts in biology",emoji:"🧬",tags:["science","biology"]}],t=[{id:"1",deckId:"1",front:"Hello",back:"Hola",tags:["greetings"]},{id:"2",deckId:"1",front:"Thank you",back:"Gracias",tags:["greetings"]},{id:"3",deckId:"1",front:"Goodbye",back:"Adiós",tags:["greetings"]},{id:"4",deckId:"2",front:"Cell",back:"The basic unit of life",tags:["basic"]},{id:"5",deckId:"2",front:"DNA",back:"Deoxyribonucleic acid - carries genetic information",tags:["genetics"]}],n=i.prepare("\n        INSERT INTO decks (id, name, description, emoji, tags, created_at, updated_at, card_count)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      ");e.forEach(e=>{const s=t.filter(t=>t.deckId===e.id).length;n.run([e.id,e.name,e.description,e.emoji,JSON.stringify(e.tags),Date.now(),Date.now(),s])}),n.finalize();const s=i.prepare("\n        INSERT INTO cards (id, deck_id, front, back, tags, created_at, updated_at, study_count, difficulty, interval, ease_factor)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      ");t.forEach(e=>{s.run([e.id,e.deckId,e.front,e.back,JSON.stringify(e.tags),Date.now(),Date.now(),0,0,1,2.5])}),s.finalize(),console.log("Sample data seeded successfully")}})};e.app.on("before-quit",()=>{i&&i.close()})})()})();
//# sourceMappingURL=index.js.map